from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from model import Product, Order
from database import ProductTable, OrderTable, ClientTable
from keyboards import (
    get_product_types_keyboard,
    get_products_keyboard,
    get_quantity_keyboard,
    get_cart_keyboard,
    get_main_keyboard,
    get_cancel_keyboard
)
from typing import Dict, List, Tuple

router = Router()

class OrderState(StatesGroup):
    selecting_category = State()
    selecting_product = State()
    selecting_quantity = State()
    cart = State()
    checkout = State()

# Temporary cart storage {user_id: [(product_id, quantity, price)]}
user_carts: Dict[int, List[Tuple[int, int, float]]] = {}

@router.message(Command("buy"))
async def buy(message: Message, state: FSMContext):
    # Check if user is registered
    client = ClientTable.get_by_phone(str(message.from_user.id))
    if not client:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register",
            reply_markup=get_main_keyboard()
        )
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=get_product_types_keyboard()
    )
    await state.set_state(OrderState.selecting_category)

@router.message(OrderState.selecting_category, F.text.in_(["–ì–æ—Ç–æ–≤—ã–µ –ü–ö", "–°–±–æ—Ä–∫–∞ –ü–ö", "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è"]))
async def select_category(message: Message, state: FSMContext):
    category = message.text
    await state.update_data(category=category)
    
    # Get products by category
    products = ProductTable.get_all_products()
    if not products:
        await message.answer("üò¢ –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    
    await message.answer(
        f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
        reply_markup=get_products_keyboard(products)
    )
    await state.set_state(OrderState.selecting_product)

@router.message(OrderState.selecting_category, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_category_selection(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(OrderState.selecting_product, F.data.startswith("product_"))
async def select_product(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    product = ProductTable.get_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    text = (
        f"üñ•Ô∏è {product.name}\n"
        f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
        f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product.quantity} —à—Ç.\n"
        f"üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è: {product.guarantee} –º–µ—Å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
    )
    
    await callback.message.edit_text(text)
    await callback.message.edit_reply_markup(
        reply_markup=get_quantity_keyboard(product_id)
    )
    await state.set_state(OrderState.selecting_quantity)
    await callback.answer()

@router.callback_query(OrderState.selecting_quantity, F.data.startswith("quantity_"))
async def select_quantity(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    product_id = int(parts[1])
    quantity = int(parts[2])
    
    product = ProductTable.get_by_id(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    if quantity > product.quantity:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ")
        return
        
    # Add to cart
    user_id = callback.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = []
        
    # Update if already in cart
    found = False
    for i, item in enumerate(user_carts[user_id]):
        if item[0] == product_id:
            user_carts[user_id][i] = (product_id, quantity, product.price)
            found = True
            break
            
    if not found:
        user_carts[user_id].append((product_id, quantity, product.price))
    
    await callback.message.delete()
    await callback.message.answer(
        f"‚úÖ {product.name} x{quantity} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
        reply_markup=get_cart_keyboard()
    )
    await state.set_state(OrderState.cart)
    await callback.answer()

@router.callback_query(OrderState.selecting_quantity, F.data == "cancel")
async def cancel_quantity_selection(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_product_types_keyboard()
    )
    await state.set_state(OrderState.selecting_category)
    await callback.answer()

@router.callback_query(OrderState.cart, F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
        
    # Get client
    client = ClientTable.get_by_phone(str(user_id))
    if not client:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    # Prepare data for order
    products = [(item[0], item[1]) for item in user_carts[user_id]]
    
    # Create order
    order_id = OrderTable.create_order(client.id, products)
    
    # Clear cart
    del user_carts[user_id]
    
    await callback.message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã —Å –ø–æ–º–æ—â—å—é /my_orders",
        reply_markup=get_main_keyboard()
    )
    await state.clear()
    await callback.answer()

@router.callback_query(OrderState.cart, F.data == "continue")
async def continue_shopping(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:")
    await callback.message.edit_reply_markup(
        reply_markup=get_product_types_keyboard()
    )
    await state.set_state(OrderState.selecting_category)
    await callback.answer()

@router.callback_query(OrderState.cart, F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id in user_carts:
        del user_carts[user_id]
    
    await callback.message.answer(
        "üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
        reply_markup=get_main_keyboard()
    )
    await state.clear()
    await callback.answer()

@router.message(Command("my_orders"))
async def my_orders(message: Message):
    # Get client
    client = ClientTable.get_by_phone(str(message.from_user.id))
    if not client:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register",
            reply_markup=get_main_keyboard()
        )
        return
        
    orders = OrderTable.get_client_orders(client.id)
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
        
    response = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in orders:
        response += (
            f"üîñ –ó–∞–∫–∞–∑ #{order.id}\n"
            f"üìÖ –î–∞—Ç–∞: {order.date}\n"
            f"üí≥ –°—É–º–º–∞: {order.total_price} —Ä—É–±.\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
        )
    
    await message.answer(response)

@router.message(Command("cart"))
async def show_cart(message: Message):
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
        
    total = 0
    response = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item in user_carts[user_id]:
        product_id, quantity, price = item
        product = ProductTable.get_by_id(product_id)
        if product:
            response += f"‚ûñ {product.name} x{quantity} = {price * quantity} —Ä—É–±.\n"
            total += price * quantity
    
    response += f"\nüí≥ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."
    
    await message.answer(
        response,
        reply_markup=get_cart_keyboard()
    )